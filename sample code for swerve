import smbus2
import struct
import time
import math
import numpy as np

class SwerveModule:
    def __init__(self, i2c_address, module_index):
        self.i2c_address = i2c_address
        self.module_index = module_index  # 0 or 1 for each Arduino
        self.drive_position = 0.0
        self.azimuth_position = 0.0
        
    def set_state(self, drive_setpoint, azimuth_setpoint):
        # Pack the float values into bytes for this specific module
        return struct.pack('ff', drive_setpoint, azimuth_setpoint)
        
    def get_state(self, data):
        # Unpack the received bytes for this specific module
        start = self.module_index * 8  # Each module uses 8 bytes (2 floats)
        module_data = data[start:start + 8]
        self.drive_position, self.azimuth_position = struct.unpack('ff', bytes(module_data))
        return self.drive_position, self.azimuth_position

class SwerveDrive:
    def __init__(self):
        self.bus = smbus2.SMBus(1)  # Use I2C bus 1
        
        # Create swerve modules
        # Arduino 1 (address 8) controls front modules
        self.front_left = SwerveModule(8, 0)   # First module on Arduino 1
        self.front_right = SwerveModule(8, 1)  # Second module on Arduino 1
        
        # Arduino 2 (address 9) controls rear modules
        self.rear_left = SwerveModule(9, 0)    # First module on Arduino 2
        self.rear_right = SwerveModule(9, 1)   # Second module on Arduino 2
        
        # Robot dimensions
        self.length = 0.5  # Distance between front and rear wheels in meters
        self.width = 0.5   # Distance between left and right wheels in meters
        
    def set_module_states(self, arduino_address, module1_drive, module1_azimuth, 
                         module2_drive, module2_azimuth):
        try:
            # Pack all four float values (16 bytes total)
            data = struct.pack('ffff', module1_drive, module1_azimuth,
                             module2_drive, module2_azimuth)
            # Convert to list of bytes
            data_list = list(data)
            self.bus.write_i2c_block_data(arduino_address, 0, data_list)
        except Exception as e:
            print(f"Error setting module states: {e}")
            
    def get_module_states(self, arduino_address):
        try:
            # Read 16 bytes (4 float values) from the Arduino
            data = self.bus.read_i2c_block_data(arduino_address, 0, 16)
            return data
        except Exception as e:
            print(f"Error getting module states: {e}")
            return [0] * 16
            
    def drive(self, forward_velocity, strafe_velocity, rotation_velocity):
        """
        Control the swerve drive with forward velocity, strafe velocity, and rotation
        
        Args:
            forward_velocity (float): Forward velocity in m/s (positive = forward)
            strafe_velocity (float): Strafe velocity in m/s (positive = right)
            rotation_velocity (float): Rotation velocity in rad/s (positive = clockwise)
        """
        # Calculate wheel velocities and angles using inverse kinematics
        a = strafe_velocity - rotation_velocity * self.length/2.0
        b = strafe_velocity + rotation_velocity * self.length/2.0
        c = forward_velocity - rotation_velocity * self.width/2.0
        d = forward_velocity + rotation_velocity * self.width/2.0
        
        # Calculate wheel speeds
        front_left_speed = math.sqrt((b*b) + (c*c))
        front_right_speed = math.sqrt((b*b) + (d*d))
        rear_left_speed = math.sqrt((a*a) + (c*c))
        rear_right_speed = math.sqrt((a*a) + (d*d))
        
        # Calculate wheel angles
        front_left_angle = math.atan2(b, c)
        front_right_angle = math.atan2(b, d)
        rear_left_angle = math.atan2(a, c)
        rear_right_angle = math.atan2(a, d)
        
        # Normalize wheel speeds
        max_speed = max(front_left_speed, front_right_speed, 
                       rear_left_speed, rear_right_speed)
        if max_speed > 1:
            front_left_speed /= max_speed
            front_right_speed /= max_speed
            rear_left_speed /= max_speed
            rear_right_speed /= max_speed
        
        # Set states for front modules (Arduino 1)
        self.set_module_states(8, front_left_speed, front_left_angle,
                             front_right_speed, front_right_angle)
        
        # Set states for rear modules (Arduino 2)
        self.set_module_states(9, rear_left_speed, rear_left_angle,
                             rear_right_speed, rear_right_angle)
        
    def get_robot_state(self):
        """Get the current state of all modules"""
        # Get states from front modules (Arduino 1)
        front_data = self.get_module_states(8)
        front_left_drive, front_left_azimuth = self.front_left.get_state(front_data)
        front_right_drive, front_right_azimuth = self.front_right.get_state(front_data)
        
        # Get states from rear modules (Arduino 2)
        rear_data = self.get_module_states(9)
        rear_left_drive, rear_left_azimuth = self.rear_left.get_state(rear_data)
        rear_right_drive, rear_right_azimuth = self.rear_right.get_state(rear_data)
        
        return {
            'front_left': {'drive': front_left_drive, 'azimuth': front_left_azimuth},
            'front_right': {'drive': front_right_drive, 'azimuth': front_right_azimuth},
            'rear_left': {'drive': rear_left_drive, 'azimuth': rear_left_azimuth},
            'rear_right': {'drive': rear_right_drive, 'azimuth': rear_right_azimuth}
        }

def main():
    swerve = SwerveDrive()
    
    try:
        while True:
            # Example: Drive forward-right while rotating clockwise
            swerve.drive(forward_velocity=0.5,    # Forward at 0.5 m/s
                        strafe_velocity=0.3,      # Right at 0.3 m/s
                        rotation_velocity=0.2)     # Clockwise at 0.2 rad/s
            
            # Get and print robot state
            state = swerve.get_robot_state()
            print(f"Robot State: {state}")
            
            time.sleep(0.1)  # 10Hz update rate
            
    except KeyboardInterrupt:
        print("Stopping swerve drive")
        swerve.drive(0.0, 0.0, 0.0)  # Stop all motors
        
if __name__ == "__main__":
    main()
